<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>MWB Implementation</title>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <link rel="stylesheet" type="text/css" charset="utf-8" href="http://padparadscha/agh/mwg.slide.css"/>
  <link rel="stylesheet" type="text/css" charset="utf-8" href="http://padparadscha/agh/prog.std.css"/>
  <meta name="agh-fly-type" content="color" />
  <script type="text/javascript" charset="utf-8" src="http://padparadscha/agh/agh.fly.js"></script>
</head>
<body>
<h1>MWB 実装について</h1>
<!--########################################################################-->
<h2>方針0. この実装が目指す物 2012/02/16</h2>
<h3>バイナリ形式 with format</h3>
<ul>
<li>バイナリ形式
  <p>省サイズ。</p>
  <p>特に、同じ field を持つ沢山のレコードを扱う時は、xml よりもずっと小さい。
  xml だと同じ属性名をレコード毎に繰り返し書かなければならなかった。
  これは、1,000,000 単位の数のイベントを扱う加速器実験などでは気になる。
  </p>
</li>
<li>どの様な構造になっているかの形式指定を先頭に持つ
  <ul>
  <li>読み取り間違いをチェック・予防できる。</li>
  <li>専用のダンプコマンド
    <pre class="agh-prog-bash">mwb tf a.mwb</pre>
    <p>テキスト形式と同様に、見ただけで大体どの様な情報が入っているかが分かる。
    更に、形式指定を丁寧に記述すれば、厳密に何の情報が入っているかが分かる。</p>
  </li>
  <li>中身が何か忘れたりしないで済む。</li>
  </ul>
</li>
</ul>
<h3>既存の実装</h3>
<p>「バイナリ形式 + バイナリ形式のフォーマット(を記述する統一的なバイナリデータ)」
という面倒な事をしている人は少ないのではないかと思う。
更に、それを公開して皆が使える様にしているというのは更に少なそう。
</p>
<p>というか、既存の実装があるかどうかや、
既存の実装ではどの様に処理をしているかをどうやって調べればよいのかが分からない…。</p>
<p>後、C の構造体の記述は或る意味バイナリのフォーマットを指定する言語である。
CLI ではこの類の構造体の構成情報をバイナリで保持している。
</p>

<h3>動機と形式間の比較</h3>
<p>元々何でこの様な物を作ろうと思ったかというと、
バイナリ形式の難点をカバーする様な物が欲しかったから。
以下に挙げるのは、主観的な各形式の利点・欠点:
</p>

<ul>
<li>plain text (自然言語)
  <ul>
  <li>◎ 人にとってとても読みやすい。</li>
  <li>× 機械では読めない</li>
  <li>× 機械的に出力するのも難しい</li>
  </ul>
</li>
<li>プログラミング言語
  <ul>
  <li>○ 人が読める</li>
  <li>○ 機械で読める</li>
  <li>△ 機械的に出力するのは面倒</li>
  <li>△ ロジックを書くのには向いているが、他の用途は…。</li>
  <li>× 実装が滅茶苦茶面倒。簡単なライブラリもない。</li>
  </ul>
</li>
<li>構造化テキスト (JSON, xml など) → <strong>ttx</strong>
  <ul>
  <li>○ 人が読める</li>
  <li>○ 機械で読める</li>
  <li>△ 機械的に出力するのは面倒</li>
  <li>△ 実装が面倒。といっても、普通は何処かのライブラリを使う。</li>
  </ul>
</li>
<li>データを並べたテキスト (CSV, awk など)
  <ul>
  <li>△ 人が読める。でも、何が書かれているか忘れると微妙。</li>
  <li>○ 機械で読むのが楽</li>
  <li>◎ 機械で出力しやすい</li>
  <li>◎ 実装が楽 (というより標準ライブラリの範囲)</li>
  <li>× 複雑な構造を表現出来ない</li>
  </ul>
</li>
<li>バイナリ
  <ul>
  <li>× 人が読めない。形式を忘れると悲惨な事に。</li>
  <li>◎ 機械で効率的に読める</li>
  <li>○ 省スペース。
    <ul>
    <li>形式にも依るが。実は、大抵の場合 CSV, awk 等と余り変わらない…</li>
    <li>[圧縮時] 冗長なデータの場合の圧縮率は高い</li>
    </ul>
  </li>
  <li>○ どんな複雑な構造でも OK (というか「テキストじゃない物全部」が binary の定義なのでこれは自明?)</li>
  <li>× 実装が面倒臭い。エンディアンの適切な処理が、特に初心者に対する閾を高めていると思う。</li>
  </ul>
</li>
<li>動的確保 (ヒープ領域、データベース、ファイルシステムなど) → <strong>mwt</strong>
  <ul>
  <li>◎ データやファイルの挿入・変更・削除が低コストで自由にできる。
    <p>他の形式だと、一部を少し変更するだけでも最初から全部再配置して書き出さないといけなくなる。</p>
  </li>
  <li>△ データのアクセスに時間が掛かるかも</li>
  <li>△ 数バイト程度の原始型の格納に使う物じゃない (というかデータサイズが滅茶苦茶に…。)
    <p>他の形式と組み合わせて使うのが普通。</p>
  </li>
  <li>× 実装は限りなく面倒。個人で手軽に実装する物じゃない。
    <p>特に以下の物をちゃんと考慮に入れたい所。</p>
    <ul>
    <li>× 一部が破壊されると、全体が復元不能に陥る危険性 → FAT の複製、ジャーナリングとか?</li>
    <li>× フラグメンテーション、メモリリーク → デフラグ、GC</li>
    </ul>
  </li>
  </ul>
</li>
<li>形式付バイナリ → <strong>mwb</strong> 今回実装する物
  <ul>
  <li>○ 専用のダンプコマンドで中身が分かる</li>
  <li>◎ 機械で効率的に読める</li>
  <li>○ 省スペース。</li>
  <li>△ 実装が面倒臭い。ライブラリとして提供する?</li>
  </ul>
</li>
</ul>

<h3>名前について</h3>
<p>初めは、ttx 形式の binary 版という物を意識していたので ttb としたが、
良く考えてみれば tt は tree だとか text だとかいう意味だったので、この名前は変だ。
しかも、ttx の binary 版という位置づけから段々離れてきたので、改めて名前を付ける事にする。
現状、良い名前が思い浮かばないので、適当に mwb と名付ける事にする。
</p>

<!--########################################################################-->
<h2>計画1. フォーマット指定の定義</h2>
<p>将来的には構造体を定義して、フォーマット指定をツリー形式で管理できる様にしたい。
しかし、それの実装は面倒なので、取り敢えずは手で書き出したりする事にする。
</p>
<p>書き出しの為のクラスを作成する。
これの実装はそんなに大変ではないだろう。</p>
<p>mwb の形式は以下の様な物とする。</p>
<pre class="agh-prog-cpp">
__attribute__((aligned(8)))
struct MwbHeader{
  u4t magic;     // TTB識別子 =0xFBB373DE;
  u4t mwbver;    // バージョン =0x00000001;
  u8t size;      // header+data のサイズ
  char format[]; // 形式指定 (null-terminated string)
  char pad[];    // 8B 境界へのパディング ={0};
};
</pre>
<ul>
<li>sizeof(TtbHeader) == (16+strlen(format)+1+7&~0x7)</li>
<li>size は sizeof(TtbHeader) + sizeof(data)。 sizeof(TtbHeader) は 8 の倍数であるが、sizeof(data) は任意の長さ。</li>
<li>但し、実際にデータを配置する際には、sizeof(data) の後に padding を敷いて 8 の倍数の長さになる様に調節する。</li>
</ul>

<h2>計画2. ダンプコマンド実装</h2>
<p>例えば、以下の様な感じな出力を生成する。</p>
<pre class="agh-prog-js">
[
  /* 0 */ etaBin:{
    mul:u4t(10),
    flow:[
      /* 0 */ complex&lt;double&gt;(0.123421,0.574013),
      ...
      /* 11 */ complex&lt;double&gt;(0.123421,0.574013),
    ],
  },
  ...
  /* 17 */ etaBin:{
    mul:u4t(10),
    flow:[
      /* 0 */ complex&lt;double&gt;(0.123421,0.574013),
      ...
      /* 11 */ complex&lt;double&gt;(0.123421,0.574013),
    ],
  },
],
</pre>

<p>これを実装する為には、</p>
<ol>
<li>フォーマットを表現する木構造の定義</li>
<li>フォーマットを読み取るコード</li>
<li>データを読み取りながら出力するコード</li>
</ol>
<p class="resume">を書く必要がある。</p>


</body>
</html>
