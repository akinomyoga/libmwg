// -*- mode: c++; coding: utf-8 -*-
#ifndef MWG_STDM_ARRAY
#define MWG_STDM_ARRAY
#include <mwg/defs.h>
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
//?mconf H array
//
#if defined(MWGCONF_HEADER_ARRAY)
# include <array>
#else
# define MWG_STDM_ARRAY_EMULATED
# include <cstdlib>
# include <stdexcept>
# include <iterator>
# include <algorithm>
# include <mwg/std/type_traits>
# include <mwg/std/tuple>

namespace mwg {
namespace stdm {

  // Note: https://stackoverflow.com/questions/15512827/why-is-stdarray-t-0-not-empty
  template<typename T, std::size_t N>
  struct array {
    T m_data[N == 0? 1: N]; // left public to provide list-initialization

  public:
    typedef T value_type;
    typedef std::size_t size_type;
    typedef std::ptrdiff_t difference_type;
    typedef T& reference;
    typedef T const& const_reference;
    typedef T* pointer;
    typedef T const* const_pointer;
    typedef T* iterator;
    typedef T const* const_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

  public:
    mwg_constexpr14 reference at(size_type pos) {
      if (pos >= N) throw std::out_of_range("array::at(index): index out of range.");
      return m_data[pos];
    }
    mwg_constexpr const_reference at(size_type pos) const {
      return const_cast<array&>(*this).at(pos);
    }
    mwg_constexpr reference operator[](size_type pos) {return m_data[pos];}
    mwg_constexpr const_reference operator[](size_type pos) const {return m_data[pos];}

    mwg_constexpr reference front() {return m_data[0];}
    mwg_constexpr const_reference front() const {return m_data[0];}
    mwg_constexpr reference back() {return m_data[N - 1];}
    mwg_constexpr const_reference back() const {return m_data[N - 1];}

    mwg_constexpr pointer data() mwg_noexcept {return m_data;}
    mwg_constexpr const_pointer data() const mwg_noexcept {return m_data;}

  public:
    mwg_constexpr iterator begin() mwg_noexcept {return m_data;}
    mwg_constexpr const_iterator begin() const mwg_noexcept {return m_data;}
    mwg_constexpr const_iterator cbegin() const mwg_noexcept {return m_data;}
    mwg_constexpr iterator end() mwg_noexcept {return m_data + N;}
    mwg_constexpr const_iterator end() const mwg_noexcept {return m_data + N;}
    mwg_constexpr const_iterator cend() const mwg_noexcept {return m_data + N;}

    mwg_constexpr reverse_iterator rbegin() mwg_noexcept {return reverse_iterator(m_data + N);}
    mwg_constexpr const_reverse_iterator rbegin() const mwg_noexcept {return const_reverse_iterator(m_data + N);}
    mwg_constexpr const_reverse_iterator crbegin() const mwg_noexcept {return const_reverse_iterator(m_data + N);}
    mwg_constexpr reverse_iterator rend() mwg_noexcept {return reverse_iterator(m_data);}
    mwg_constexpr const_reverse_iterator rend() const mwg_noexcept {return const_reverse_iterator(m_data);}
    mwg_constexpr const_reverse_iterator crend() const mwg_noexcept {return const_reverse_iterator(m_data);}

  public:
    mwg_constexpr bool empty() const mwg_noexcept {return N == 0;}
    mwg_constexpr size_type size() const mwg_noexcept {return N;}
    mwg_constexpr size_type max_size() const mwg_noexcept {return N;}

  public:
    // TODO: mwg_noexcept_when(stdm::is_nothrow_swappable<T>::value)
    //       <type_traits> is_nothrow_swappable (C++17) に対応していなければ使えない。
    // TODO: swap できない型に対してはコンパイルエラーになるのではないか。
    void swap(array& other) {
      using namespace std;
      for (size_type i = 0; i < N; i++)
        swap(this->m_data[i], other.m_data[i]);
    }
    void fill(const T& value) {
      for (size_type i = 0; i < N; i++)
        this->m_data[i] = value;
    }
  };

  template<typename T, std::size_t N>
  bool operator==(array<T, N> const& lhs, array<T, N> const& rhs) {
    return std::equal(lhs.begin(), lhs.end(), rhs.begin());
  }
  template<typename T, std::size_t N>
  bool operator!=(array<T, N> const& lhs, array<T, N> const& rhs) {return !(lhs == rhs);}
  template<typename T, std::size_t N>
  bool operator<(array<T, N> const& lhs, array<T, N> const& rhs) {
    return std::lexicographical_compare(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());
  }
  template<typename T, std::size_t N>
  bool operator<=(array<T, N> const& lhs, array<T, N> const& rhs) {return !(rhs < lhs);}
  template<typename T, std::size_t N>
  bool operator>(array<T, N> const& lhs, array<T, N> const& rhs) {return rhs < lhs;}
  template<typename T, std::size_t N>
  bool operator>=(array<T, N> const& lhs, array<T, N> const& rhs) {return !(lhs < rhs);}

  template<typename T, std::size_t N>
  void swap(array<T, N>& lhs, array<T, N>& rhs) mwg_noexcept_when(mwg_noexcept_when(lhs.swap(rhs))) {lhs.swap(rhs);}

  template<std::size_t I, class T, std::size_t N>
  mwg_constexpr typename stdm::enable_if<(I < N), T&>::type
  get(array<T, N>& arr) {return arr[I];}
  template<std::size_t I, class T, std::size_t N>
  mwg_constexpr typename stdm::enable_if<(I < N), T const&>::type
  get(array<T, N> const& arr) {return arr[I];}
#if mwg_has_feature(cxx_rvalue_references)
  template<std::size_t I, class T, std::size_t N>
  mwg_constexpr typename stdm::enable_if<(I < N), T&&>::type
  get(array<T, N>&& arr) {return stdm::move(arr[I]);}
#endif

#ifdef MWG_STDM_TUPLE_EMULATED
  template<typename T, std::size_t N>
  struct tuple_size<array<T, N> >:
    stdm::integral_constant<std::size_t, N> {};
  template<std::size_t I, typename T, std::size_t N>
  struct tuple_element<I, array<T, N> >: stdm::enable_if<(I < N), T> {};
#endif
}
}

#ifndef MWG_STDM_TUPLE_EMULATED
namespace std {
  template<typename T, std::size_t N>
  struct tuple_size<mwg::stdm::array<T, N> >:
    mwg::stdm::integral_constant<std::size_t, N> {};
  template<std::size_t I, typename T, std::size_t N>
  struct tuple_element<I, mwg::stdm::array<T, N> >: mwg::stdm::enable_if<(I < N), T> {}
}
#endif

#endif
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
#endif
#pragma%x begin_check
#include <mwg/except.h>
#include <mwg/std/array>

int test() {
  namespace ns = mwg::stdm;
  typedef ns::array<int, 10> arr_t;
  ns::array<int, 10> arr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  mwg_check((ns::tuple_size<arr_t>::value == 10 && ns::is_same<ns::tuple_element<2, arr_t>::type, int>::value));
  mwg_check(arr.front() == 0 && arr.back() == 9);
  mwg_check(arr.data() == &arr[0]);
  mwg_check(!arr.empty() && arr.size() == 10 && arr.max_size() == 10);
  for (int i = 0; i < 10; i++) mwg_check(arr[i] == i && arr.at(i) == i);
  mwg_check(ns::get<0>(arr) == 0 && ns::get<5>(arr) == 5 && ns::get<9>(arr) == 9);
  for (arr_t::iterator i = arr.begin(); i != arr.end(); i++) *i *= *i;
  for (int i = 0; i < 10; i++) mwg_check(arr[i] == i * i);
  return 0;
}

int main() {
  return test();
}
#pragma%x end_check
