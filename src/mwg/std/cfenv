// -*- mode: c++; coding: utf-8 -*-
#ifndef MWG_STDM_CFENV
#define MWG_STDM_CFENV
/*?mconf
 * H cfenv || H fenv.h
 */
#ifdef MWGCONF_HEADER_CFENV
# include <cfenv>
#elif defined(MWGCONF_HEADER_FENV_H)
# include <fenv.h>
namespace mwg {
namespace stdm {
  // types
  using ::fenv_t;
  using ::fexcept_t;

  // functions
  using ::feclearexcept;
  using ::fetestexcept;
  using ::feraiseexcept;
  using ::fegetexceptflag;
  using ::fesetexceptflag;

  using ::fegetround;
  using ::fesetround;
  using ::fegetenv;
  using ::fesetenv;
  using ::feholdexcept;
  using ::feupdateenv;
}
}
#else
# define MWG_STDM_CFENV_EmulatedFenv
# include <cerrno>
# include <mwg/defs.h>

namespace mwg {
namespace stdm {

  typedef int fexcept_t;

  typedef struct _fenv_t {
    fexcept_t fe_except;
    int       fe_round;
    bool      fe_nonstop;
  } fenv_t;

# ifndef FE_INVALID
#  define FE_INVALID   (1 << 0)
# endif
# ifndef FE_DIVBYZERO
#  define FE_DIVBYZERO (1 << 2)
# endif
# ifndef FE_OVERFLOW
#  define FE_OVERFLOW  (1 << 3)
# endif
# ifndef FE_UNDERFLOW
#  define FE_UNDERFLOW (1 << 4)
# endif
# ifndef FE_INEXACT
#  define FE_INEXACT   (1 << 5)
# endif
# ifndef FE_ALL_EXCEPT
#  define FE_ALL_EXCEPT (FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW | FE_INEXACT)
# endif

  mwg_static_assert(
    (((FE_INVALID | FE_DIVBYZERO) & (FE_OVERFLOW | FE_UNDERFLOW | FE_INEXACT))
      | (FE_INVALID & FE_DIVBYZERO)
      | ((FE_OVERFLOW | FE_UNDERFLOW) & FE_INEXACT)
      | (FE_OVERFLOW & FE_UNDERFLOW)) == 0,
    "mwg/stdm/cfenv: exceptflag macros broken");

# ifndef FE_TONEAREST
#  define FE_TONEAREST  (0 << 10)
# endif
# ifndef FE_DOWNWARD
#  define FE_DOWNWARD   (1 << 10)
# endif
# ifndef FE_UPWARD
#  define FE_UPWARD     (2 << 10)
# endif
# ifndef FE_TOWARDZERO
#  define FE_TOWARDZERO (3 << 10)
# endif

  mwg_static_assert(
    FE_TONEAREST != FE_DOWNWARD &&
    FE_TONEAREST != FE_UPWARD &&
    FE_TONEAREST != FE_TOWARDZERO &&
    FE_DOWNWARD != FE_UPWARD &&
    FE_DOWNWARD != FE_TOWARDZERO &&
    FE_UPWARD !=  FE_TOWARDZERO,
    "mwg/stdm/cfenv: feround macros broken");

  extern inline fenv_t& _fenv() {
    static fenv_t data = {0, FE_TONEAREST, false};
    return data;
  }

  extern inline fenv_t const* _fenv_default() {
    static fenv_t data = {0, FE_TONEAREST, false};
    return &data;
  }
# undef FE_DFL_ENV
# define FE_DFL_ENV (::mwg::stdm::_fenv_default())

  // fe_except
  inline int feclearexcept(int except) {
    return _fenv().fe_except = 0;
  }
  inline int fegetexceptflag(fexcept_t *pflag, int except) {
    *pflag = _fenv().fe_except & except;
    return 0;
  }
  inline int fesetexceptflag(const fexcept_t *pflag, int except) {
    _fenv().fe_except |= *pflag & except & FE_ALL_EXCEPT;
    return 0;
  }
  inline int fetestexcept(int except) {
    return _fenv().fe_except & except;
  }
  inline int feraiseexcept(int except) {
    if (except) {
      if (!_fenv().fe_nonstop) {
        if (except & FE_INVALID)
          errno = EDOM;
        else if (except & (FE_DIVBYZERO | FE_OVERFLOW))
          errno = ERANGE;
      }

      fexcept_t except_ = except;
      fesetexceptflag(&except_, FE_ALL_EXCEPT);
    }
    return 0;
  }

  // fe_round
  inline int fegetround() {
    return _fenv().fe_round;
  }
  inline int fesetround(int round) {
    _fenv().fe_round = round;
    return 0;
  }

  // fenv
  inline int fegetenv(fenv_t *penv) {
    *penv = _fenv();
    return 0;
  }
  inline int fesetenv(const fenv_t *penv) {
    _fenv() = *penv;
    return 0;
  }
  inline int feholdexcept(fenv_t *penv) {
    fenv_t& fe = _fenv();
    penv->fe_except = fe.fe_except;
    fe.fe_except = 0;
    fe.fe_nonstop = true;
    return 0;
  }
  inline int feupdateenv(const fenv_t *penv) {
    fenv_t& fe = _fenv();
    fexcept_t const ex = fe.fe_except;
    fe = *penv;
    feraiseexcept(ex);
    return 0;
  }
}
}

#endif
#endif
