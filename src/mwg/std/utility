// -*- mode: c++; coding: utf-8 -*-
#ifndef MWG_STDM_UTILITY
#define MWG_STDM_UTILITY
#include <mwg/defs.h>
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
/*?mconf
 *
 * StandardHeaders=utility
 * H tr1/utility && StandardHeaders+=' tr1/utility'
 * if X -t'std::forward' std_forward "$StandardHeaders" 'int a; int b = std::forward<int&>(a);'; then
 *   Namespace=std
 * elif X -t'std::tr1::forward' std_forward "$StandardHeaders" 'int a; int b = std::tr1::forward<int&>(a);'; then
 *   Namespace=std::tr1
 * fi
 *
 * function check_cxx11_functionality {
 *   [[ $Namespace ]] || return 1
 *   if X - '' 'int&& a = 1;'; then
 *     X -t"(vcbug) $Namespace::forward<int>(1)" -o - "$StandardHeaders" "int&& a = $Namespace::forward<int>(1);" || return 1
 *   fi
 *   return 0
 * }
 *
 * check_cxx11_functionality || D MWGCONF_INVALID_HEADER_UTILITY 1
 *
 */
#if MWGCONF_HEADER_STD >= 2011 && !defined(MWGCONF_INVALID_HEADER_UTILITY)
# include <utility>
#else
# include <algorithm>
# include <utility>
# include "type_traits"
namespace mwg {
namespace stdm {

#if mwg_has_feature(cxx_rvalue_references)
  template<typename T>
  T&& forward(typename stdm::remove_reference<T>::type& value) {
    return static_cast<T&&>(value);
  }
  template<typename T>
  T&& forward(typename stdm::remove_reference<T>::type&& value) {
    return static_cast<T&&>(value);
  }
  template<typename T>
  typename stdm::remove_reference<T>::type&& move(T&& value) {
    return static_cast<typename stdm::remove_reference<T>::type&&>(value);
  }
#else
  // Note: stdx::add_const_reference は、左辺値参照に対しては何もしない。
  //   右辺値参照は左辺値参照に変更する。それ以外に対して const& を付加する。
  //
  // Note: stdm::forward を使う時は mwg_forward_rvalue (const &) を使って
  //   宣言するのだから必ず const& をつける事ができる気がするが、
  //   実際には別の目的で参照を T に指定している箇所があったので、
  //   stdx::add_const_reference を用いる必要があった。
  //
  template<typename T>
  typename stdx::add_const_reference<T>::type
  forward(typename stdx::add_const_reference<T>::type value) {return value;}

  template<typename T>
  T& move(const T& value) {return const_cast<T&>(value);}
#endif
}
}
#endif /* end of MWGCONF_HEADER_STD switch */
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

//-----------------------------------------------------------------------------
#include <mwg/std/type_traits>
namespace mwg {
namespace stdx {
/*?lwiki
 * * 独自拡張
 *
 * @def mwg_forward_rvalue
 * パラメータ型に対する後置修飾。
 * C++11 では && に展開され C++03 では const& に展開される。
 * -完全転送 (perfect forward) をする時のパラメータに用いる。
 *  &pre(!cpp){
 * template<typename T>
 * void func(T mwg_forward_rvalue value) {
 *   mwg::stdm::forward<T>(value);
 * }
 * }
 * -右辺値参照を受け取る関数に用いる。
 *  但し const& による overload がない場合に限る。
 *  &pre(!cpp){
 * void func(C mwg_forward_rvalue value) { ... }
 * }
 *  対象のパラメータは更に mwg::stdm::move を用いて別の関数に渡す事を想定している。
 *  mwg::stdm::move は C++11 では右辺値参照に変換を行い破壊的操作される可能性もある。
 *  一方で C++03 の時にはそのままの型で渡されるので破壊による矛盾の心配はない。
 *
 * @def mwg_forward_lvalue
 * パラメータ型に対する後置修飾。
 * C++11 では & に展開され C++03 では const& に展開される。
 * forward 擬きの実装時にその引数として使用する。
 * &pre(!cpp){
 * template<typename T>
 * T mwg_forward_rvalue my_forward(T mwg_forward_lvalue value) {
 *   return reinterpret_cast<T mwg_forward_rvalue>(value);
 * }
 * }
 *
 * ** 実装Note: マクロを用いる理由
 *
 * クラステンプレートではなくマクロで提供するのは、クラステンプレートを用いて
 * `void func(typename mwg::forward_rvalue<Args>::type...)` の様に記述すると、
 * テンプレート実引数の推論ができなくなる為である。`Args` を推論してもらう為には、
 * `void func(Args const&...)` などの様な形式でなければならない。
 *
 * ** 使用例
 *
 * &pre(!cpp){
 * template<typename T> void hoge(T mwg_forward_rvalue t) {hoge_impl(mwg::stdm::forward<T>(t));}
 *
 * template<typename T> void hoge(T const& t) {hoge_impl(t);}
 * // NG: 参照が定数参照になる
 * //  ok: int -> const int&
 * //  ng: int& -> const int&
 * //  ok: const int& -> const int&
 *
 * template<typename T> void hoge(T& t) {hoge_impl(t);}
 * // NG: 定数値を渡せない
 * //  ng: int
 * //  ok: int& -> int&
 * //  ok: const int& -> const int&
 * }
 *
 */

#if mwg_has_feature(cxx_rvalue_references)
#  define mwg_forward_lvalue &
#  define mwg_forward_rvalue &&
#else
#  define mwg_forward_lvalue const&
#  define mwg_forward_rvalue const&
#endif

}
}
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
#endif /* end of include guard */
#pragma%x begin_check
#include <mwg/std/utility>

int main() {
  int b = 123;
  int& b1 = mwg::stdm::forward<int&>(b);
  mwg_unused(b1);

#if mwg_has_feature(cxx_rvalue_references)
  int&& a1 = mwg::stdm::forward<int>(123);
  int&& a2 = mwg::stdm::forward<int&&>(123);
  mwg_unused(a1);
  mwg_unused(a2);
#endif

  return 0;
}
#pragma%x end_check
