// -*- mode: c++; coding: utf-8 -*-
#ifndef MWG_STDM_ITERATOR
#define MWG_STDM_ITERATOR
#include <mwg/std/def.h>
#include <iterator>

namespace mwg {
namespace stdm {
  // move_iterator, reverse_iterator
  // next, prev
  // std::r?c?(begin|end) for obj.c?r?(begin|end)()

  /*?mconf
   * X std_begin_for_array iterator \
   *   'int arr[1]; std::begin(arr); std::end(arr);'
   * X std_rbegin_for_array iterator \
   *   'int arr[1]; std::rbegin(arr); std::rend(arr); std::cbegin(arr); std::cend(arr); std::crbegin(arr); std::crend(arr);'
   * X std_size_for_array iterator \
   *   'int arr[1]; std::size(arr);'
   */
#ifndef MWGCONF_HAS_STD_BEGIN_FOR_ARRAY
  // C++11
  template<typename T, std::size_t N>
  mwg_constexpr T* begin(T (&arr)[N]) {return arr;}
  template<typename T, std::size_t N>
  mwg_constexpr T* end(T (&arr)[N]) {return arr + N;}
  template<typename T, std::size_t N>
  mwg_constexpr T const* begin(T const (&arr)[N]) {return arr;}
  template<typename T, std::size_t N>
  mwg_constexpr T const* end(T const (&arr)[N]) {return arr + N;}
#endif

#ifndef MWGCONF_HAS_STD_RBEGIN_FOR_ARRAY
  // C++14
  template<typename T, std::size_t N>
  mwg_constexpr reverse_iterator<T*> rbegin(T (&arr)[N]) {return reverse_iterator<T*>(arr + N);}
  template<typename T, std::size_t N>
  mwg_constexpr reverse_iterator<T*> rend(T arr[N]) {return reverse_iterator<T*>(arr);}
  template<typename T, std::size_t N>
  mwg_constexpr reverse_iterator<T const*> rbegin(T const (&arr)[N]) {return reverse_iterator<T*>(arr + N);}
  template<typename T, std::size_t N>
  mwg_constexpr reverse_iterator<T const*> rend(T const arr[N]) {return reverse_iterator<T*>(arr);}
  template<typename T, std::size_t N>
  mwg_constexpr T const* cbegin(T const (&arr)[N]) {return arr;}
  template<typename T, std::size_t N>
  mwg_constexpr T const* cend(T const (&arr)[N]) {return arr + N;}
  template<typename T, std::size_t N>
  mwg_constexpr reverse_iterator<T const*> crbegin(T const (&arr)[N]) {return reverse_iterator<T const*>(arr + N);}
  template<typename T, std::size_t N>
  mwg_constexpr reverse_iterator<T const*> crend(T const (&arr)[N]) {return reverse_iterator<T const*>(arr);}
#endif

#ifndef MWGCONF_HAS_STD_SIZE_FOR_ARRAY
  // C++1z
  template<typename T, std::size_t N>
  mwg_constexpr std::size_t size(T const (&)[N]) {return N;}
#endif

  /*?mconf
   * X -t'std::iterator_traits<int>' -oMWGCONF_HAS_CXX17_ITERATOR_TRAITS iterator 'std::iterator_traits<int> var;'
   */
#ifndef MWGCONF_HAS_CXX17_ITERATOR_TRAITS
  namespace iterator_detail {
    template<
      typename T0 = void, typename T1 = void,
      typename T2 = void, typename T3 = void,
      typename T4 = void, typename T5 = void,
      typename T6 = void, typename T7 = void,
      typename T8 = void, typename T9 = void>
    struct void_type: mwg::identity<void> {};

    template<class T, typename = void>
    struct iterator_traits_base {};

    template<typename T>
    struct iterator_traits_base<
      T, typename void_type<
           typename T::difference_type,
           typename T::value_type,
           typename T::pointer,
           typename T::reference,
           typename T::iterator_category
           >::type>
    {
      typedef typename T::difference_type   difference_type;
      typedef typename T::value_type        value_type;
      typedef typename T::pointer           pointer;
      typedef typename T::reference         reference;
      typedef typename T::iterator_category iterator_category;
    };
  }

  template<class T> struct iterator_traits: iterator_detail::iterator_traits_base<T> {};

  template<class T> struct iterator_traits<T*> {
    typedef std::ptrdiff_t difference_type;
    typedef T value_type;
    typedef T* pointer;
    typedef T& reference;
    typedef random_access_iterator_tag iterator_category;
  };
  template<class T> struct iterator_traits<const T*> {
    typedef std::ptrdiff_t difference_type;
    typedef T value_type;
    typedef const T* pointer;
    typedef const T& reference;
    typedef random_access_iterator_tag iterator_category;
  };
#endif

}
}

#endif
