# -*- mode:sh; mode:sh-bash -*-

P '#ifndef MWGCONF_MWG_CONFIG_H'
P '#define MWGCONF_MWG_CONFIG_H'
P

source ../mmake/vars.sh

if ! S -t'/* C++ Compiler? */' '' '' 'class A{}; int main(){return 0;}'; then
  bold=$'\e[1m' ul=$'\e[4m' ul0=$'\e[24m' sgr0=$'\e[m'
  echo "mwg_config.mconf: ${bold}This is not a sane C++ compiler. Please check \`$ul$CFGDIR/config.log$ul0' to modify the configuration, and then run \`${ul}make clean-cxx-cache${ul0}'.$sgr0" >&2
  return 1
fi

fname_swc="$CFGDIR/include/mwg_config_common.h"
msg_commonConfigName=mwg/config.h
exec 7>"$fname_swc"; fdbase=7
cat<<EOF >&$fdbase
#ifndef MWGCONF_MWG_CONFIG_COMMON_H
#define MWGCONF_MWG_CONFIG_COMMON_H
#include <mwg_config.h>

#ifdef __GNUC__
# define MWG_GNUC_VER (__GNUC__*10000+__GNUC_MINOR__*100+__GNUC_PATCHLEVEL__)
# ifdef __GXX_EXPERIMENTAL_CXX0X__
#   define MWG_GNU_STD11 MWG_GNUC_VER
# else
#   define MWG_GNU_STD11 0
# endif
#else
# define MWG_GNUC_VER  0
# define MWG_GNU_STD11 0
#endif

EOF

#******************************************************************************
#
#  Library Features
#
#******************************************************************************

# H cstdio
# H stdio.h
# H unistd.h

#------------------------------------------------------------------------------
# header collections

# C++TR1 Headers
H -t'"C++ TR1 Library"' tr1/memory
if test -n "$MWGCONF_HEADER_TR1_MEMORY"; then
  D MWGCONF_HEADER_TR1 1
  # H tr1/random # 誰も使っていない気がする
else
  D MWGCONF_HEADER_TR1
fi

# Boost Library Headers
H -t'"Boost Library"' boost/config.hpp

#------------------------------------------------------------------------------
# integral types

X -t'long long' longlong '' 'long long value=0;'

X -t'__int64'   int64    '' '__int64 value=0;'
if [[ $MWGCONF_HAS_INT64 ]]; then
  S -t'"__int64 is long"' INT64_IS_LONG '' 'template<typename T> struct A{};template<> struct A<long>{static const int v=0;};int f(){return A<__int64>::v;}'
  
  if [[ $MWGCONF_HAS_LONGLONG ]]; then
    S -t'"__int64 is long long"' INT64_IS_LONGLONG '' 'template<typename T> struct A{};template<> struct A<long long>{static const int v=0;};int f(){return A<__int64>::v;}'
  fi
fi
if [[ ! $MWGCONF_INT64_IS_LONGLONG && ! $MWGCONF_INT64_IS_LONG ]]; then
  D MWGCONF_HAS_DISTINCT_INT64 $MWGCONF_HAS_INT64
else
  D MWGCONF_HAS_DISTINCT_INT64
fi

function check:MWGCONF_HAS_64BIT_INTEGER {
  local long_long='long' __int64='long'
  [[ $MWGCONF_HAS_LONGLONG ]] && long_long='long long'
  [[ $MWGCONF_HAS_INT64 ]] && __int64='__int64'
  X -t'"has 64bit integer?"' \
    -oMWGCONF_HAS_64BIT_INTEGER \
    '' "char dummy[sizeof(long) == 8 || sizeof($long_long) == 8 || sizeof($__int64) == 8? 1: -1];"
}

check:MWGCONF_HAS_64BIT_INTEGER

#------------------------------------------------------------------------------
# Standard Library Version

cat<<EOF >&$fdbase
/*
 * MWGCONF_HEADER_STD==2011 C++11
 * MWGCONF_HEADER_STD==2005 TR1
 * MWGCONF_HEADER_STD==2003 C++03, C++98
 * 
 * MWGCONF_HEADER_TR1       TR1 headers in tr1/ directory
 */
#ifndef MWGCONF_HEADER_STD
# ifdef __GNUC__
#  if (__GNUC__*10000+__GNUC_MINOR__*100)>=40300 /* gcc 4.3 */
#   define MWGCONF_HEADER_STD 2011 /* C++11 */
#  elif __GNUC__>=4                              /* gcc 4.3 */
#   define MWGCONF_HEADER_STD 2003 /* C++03 */
#   define MWGCONF_HEADER_TR1
#  else
#   define MWGCONF_HEADER_STD 2003 /* C++03 */
#  endif
# elif defined(_MSC_VER)
#  if _MSC_VER>=1600                             /* VS2010 VC10 */
#   define MWGCONF_HEADER_STD 2011 /* C++11 */
#  elif _MSC_FULL_VER>=150030729                 /* VS2008 VC9 SP1 */
#   define MWGCONF_HEADER_STD 2005 /* TR1 */
#  else
#   define MWGCONF_HEADER_STD 2003 /* C++03 */
#  endif
# else
#  define MWGCONF_HEADER_STD 2003 /* C++03 */
# endif
#endif

EOF

if X -t'"C++11 Library"' - 'memory' 'std::unique_ptr<int> ptr(new int)'; then
  D MWGCONF_HEADER_STD 2011
elif X -t'"C++ TR1 Library at std::"' - 'memory' 'std::shared_ptr<int> ptr(new int)'; then
  D MWGCONF_HEADER_STD 2005
else
  D MWGCONF_HEADER_STD 2003
fi

#******************************************************************************
#
#  Compiler
#
#******************************************************************************
# compiler identification

cat<<EOF >&$fdbase
#if (__cplusplus>=201103L)||defined(__GXX_EXPERIMENTAL_CXX0X__)||(_MSC_VER>=1600)
# define MWGCONF_STD11
#endif

#ifdef __INTEL_COMPILER
//# define MWGCONF_ICC_VER __INTEL_COMPILER_BUILD_DATE
# define MWGCONF_ICC_VER __INTEL_COMPILER
# ifdef __GXX_EXPERIMENTAL_CXX0X__
#  define MWGCONF_ICC_STD11 MWGCONF_ICC_VER
# else
#  define MWGCONF_ICC_STD11 0
# endif
#elif defined(__clang__)
# define MWGCONF_CLANG_VER (__clang_major__*10000+__clang_minor__*100+__clang_patchlevel__)
# ifdef __GXX_EXPERIMENTAL_CXX0X__
#  define MWGCONF_CLANG_STD11 MWGCONF_CLANG_VER
# else
#  define MWGCONF_CLANG_STD11 0
# endif
#elif defined(__GNUC__)
# if __GNUC__>=3
#  define MWGCONF_GCC_VER (__GNUC__*10000+__GNUC_MINOR__*100+__GNUC_PATCHLEVEL__)
# else
#  define MWGCONF_GCC_VER (__GNUC__*10000+__GNUC_MINOR__*100)
# endif
# ifdef __GXX_EXPERIMENTAL_CXX0X__
#  define MWGCONF_GCC_STD11 MWGCONF_GCC_VER
# else
#  define MWGCONF_GCC_STD11 0
# endif
#elif defined(_MSC_VER)
# define MWGCONF_MSC_VER _MSC_FULL_VER
#else
# define MWGCONF_GCC_VER   0
# define MWGCONF_GCC_STD11 0
#endif

EOF

if M compiler_icc   '' __INTEL_COMPILER; then
  # MWGCONF_ICC_VER
  #   MWGCONF_ICC_VER  500 : icc 5.0.0
  #   MWGCONF_ICC_VER  600 : icc 6.0.0
  #   MWGCONF_ICC_VER  800 : icc 8.0.0
  #   MWGCONF_ICC_VER  900 : icc 9.0.0
  #   MWGCONF_ICC_VER 1100 : icc 11.0.0
  #   MWGCONF_ICC_VER 1200 : icc 12.0.0
  #   MWGCONF_ICC_VER 1300 : icc 13.0.0
  #
  # C++11 Features
  #   https://software.intel.com/en-us/articles/c0x-features-supported-by-intel-c-compiler "C++11 Features Supported by Intel(R) C++ Compiler | Intel(R) Developer Zone"
  #   https://software.intel.com/en-us/articles/c14-features-supported-by-intel-c-compiler "C++14 Features Supported by Intel(R) C++ Compiler | Intel(R) Developer Zone"
  c_icc=1
elif M compiler_clang '' __clang__; then
  # C++11 Features
  #   http://clang.llvm.org/cxx_status.html "Clang - C++1z, C++14, C++11 and C++98 Status"
  # __has_feature macros
  #   http://clang.llvm.org/docs/LanguageExtensions.html "Clang Language Extensions — Clang 3.9 documentation"
  c_clang=1
elif M compiler_gcc   '' __GNUC__; then
  # C++11 Features
  #   http://gcc.gnu.org/projects/cxx0x.html
  #   https://gcc.gnu.org/projects/cxx-status.html "C++ Standards Support in GCC - GNU Project - Free Software Foundation (FSF)"
  c_gcc=1
elif M compiler_vc    '' _MSC_VER; then
  # _MSC_FULL_VER
  #   VC6.0         SP5, SP6  :  12008804
  #   Win DDK (2600.1106)     :  13009176 http://computer-programming-forum.com/81-vc/76c9facd30c701b4.htm
  #   VC7.0  VS2002 SP1?      :  13009466
  #   Visual C++ Toolkit 2003 :  13103052 http://rayflood.org/mozilla/msvc_version.html
  #   Win Server 2003 DDK     :  13102179
  #   Win Server 2003 SP1 DDK :  13104035 http://rayflood.org/mozilla/msvc_version.html
  #   VC7.1  VS2003 Alpha?    :  13102140
  #                 ?         :  13102196
  #                 Beta      :  13102292
  #                 Release   :  13103077
  #                 SP1       :  13106030
  #   Win Server 2003 SP1 SDK : 140040310 (cl.exe for AMD64, not default) http://www.virtualdub.org/blog/pivot/entry.php?id=47
  #   VC8.0  VS2005 Beta 1    : 140040607
  #                 Beta 2    : 140050215
  #                 Release   : 140050320
  #                 SP1       : 140050727
  #   VC9.0  VS2008 Beta 2    : 150020706
  #                 Release   : 150021022
  #                 SP1       : 150030729
  #   VC10.0 VS2010 Beta1     : 160020506
  #                 Beta2     : 160021003
  #                 Release   : 160030319
  #                 SP1       : 160040219
  #   VC11.0 VS2012 RTM       : 170050727
  #                 NovCTP    : 170051025
  #                 Update 1  : 170051106
  #                 Update 2  : 170060315
  #                 Update 3  : 170060610
  #                 Update 4  : 170061030
  #   VC12.0 VS2013 Preview   : 180020617
  #                 RC        : 180020827
  #                 RTM, Upd1 : 180021005
  #                 NovCTP    : 180021114
  #                 Update2RC : 180030324
  #                 Update 2  : 180030501
  #                 Update 3  : 180030723
  #                 Update 4  : 180031101
  #                 Update 5  : 180040629
  #   VC13.0 VS2015 RTM       : 190023026
  #                 Update 1  : 190023506
  #                 Update2RC : 190023824
  #   
  # C++11 Features
  #   https://msdn.microsoft.com/en-us/library/hh567368.aspx "Support For C++11/14/17 Features (Modern C++)"
  #   https://msdn.microsoft.com/ja-jp/library/hh567368.aspx
  #   http://blogs.msdn.com/b/vcblog/archive/2011/09/12/10209291.aspx
  # References
  #   http://d.hatena.ne.jp/yohhoy/20121106/p1
  #   http://sourceforge.net/p/predef/wiki/Compilers/
  #   [[_MSC_VERと_MSC_FULLVERをまとめる - Qiita>http://qiita.com/yumetodo/items/8c112fca0a8e6b47072d]]
  c_vc=1
fi

#******************************************************************************
#
#  C++ Features
#
#******************************************************************************
#
# Table
#
#   http://en.cppreference.com/w/cpp/compiler_support
#   http://wiki.apache.org/stdcxx/C%2B%2B0xCompilerSupport
#
# ToDo: Preprocessor __VA_ARGS__ / MWG_STD_VA_ARGS
#
#------------------------------------------------------------------------------
# definitions

cat <<EOF >&$fdbase
//*****************************************************************************
//
// C++ Features
//
//-----------------------------------------------------------------------------
#ifndef mwg_has_feature
# define mwg_has_feature(NAME) mwg_has_feature_IMPL_##NAME
#endif

EOF

# @var[in] cond_msc
# @var[in] cond_gcc
# @var[in] cond_clang
# @var[in] cond_expression
declare_feature() {
  local name="$1"
  local value="$2"
  local defname_old; mwg.uppercase.set defname_old "MWGCONF_STD_$name"
  local defname=mwg_has_feature_IMPL_cxx_$name
  local m_cond_gcc="${cond_gcc}"
  local m_cond_icc="${cond_icc}"
  local m_cond_msc="${cond_msc}"
  case "${cond_clang}" in
  (-a|'')
      local m_cond_clang="__has_feature(cxx_$name)" ;;
  (*)
      local m_cond_clang="${cond_clang}" ;;
  esac
  local x_cond_expr="${cond_expression}"
  
  cat <<EOF >&$fdbase
//-----------------------------------------------------------------------------
//  mwg_has_feature(cxx_$name)
//-----------------------------------------------------------------------------
#ifndef $defname
# if (${m_cond_gcc}) || (${m_cond_icc}) || (${m_cond_msc})
#  define $defname ${value:-1}
# elif defined(MWGCONF_CLANG_VER)
#  if $m_cond_clang
#   define $defname ${value:-1}
#  endif
# endif
# ifdef $defname
#  define $defname_old $defname
# else
#  define $defname 0
# endif
#endif

EOF

  if [[ $c_gcc$c_icc$c_vc$c_clang ]]; then
    P "/* $defname will be defined in $msg_commonConfigName */"
    P
  else
    if cat <<EOF | test_source_cached S-mwg%c++11%$name "C++11 feature $name" "C++11 feature ${t_sgr35}${name}${t_sgr0}"; then
void f(){
  $x_cond_expr;
}
EOF
      D $defname 1
      D $defname_old 1
    else
      D $defname 0
      D $defname_old
    fi
  fi
}

#------------------------------------------------------------------------------
# c++11 auto_type (N1984, N1737, N2546, N2541)

cond_gcc='MWGCONF_GCC_STD11>=40400'
cond_icc='MWGCONF_ICC_STD11>=1200'
cond_msc='_MSC_VER>=1600'
cond_clang='-a'
cond_expression='auto p=new int;'
declare_feature auto_type

#------------------------------------------------------------------------------
# c++11 lambdas (N2927)

cond_gcc='MWGCONF_GCC_STD11>=40500'
cond_icc='MWGCONF_ICC_STD11>=1200'
cond_msc='_MSC_VER>=1600'
cond_clang='-a'
cond_expression='([](int n) -> int {return n+1;})(10);'
declare_feature lambdas 200907

#------------------------------------------------------------------------------
# c++11 decltype (N2343, N3276)

cond_gcc='MWGCONF_GCC_STD11>=40300'
cond_icc='MWGCONF_ICC_STD11>=1200'
cond_msc='_MSC_VER>=1600'
cond_clang='-a'
cond_expression='int a=0;decltype(a) b=a;'
declare_feature decltype 200707

#------------------------------------------------------------------------------
# c++11 nullptr (N2431)

cond_gcc='MWGCONF_GCC_STD11>=40600'
cond_icc='MWGCONF_ICC_STD11>=1206' # with /Qoption,cpp,"--nullptr" ?
cond_msc='_MSC_VER>=1600'
cond_clang='-a'
cond_expression='int* a=nullptr;'
declare_feature nullptr

#------------------------------------------------------------------------------
# c++11 rvalue_references (N2118)

cond_gcc='MWGCONF_GCC_STD11>=40300'
cond_icc='MWGCONF_ICC_STD11>=1200'
cond_msc='_MSC_VER>=1600'
cond_clang='-a'
cond_expression='int&& a=1;'
declare_feature rvalue_references 200610

#------------------------------------------------------------------------------
# c++11 ref_qualifiers (N2439)

cond_gcc='MWGCONF_GCC_STD11>=40801'
cond_icc='MWGCONF_ICC_STD11>=1400'
cond_msc='_MSC_VER>=1900'
cond_clang='__has_feature(cxx_reference_qualified_functions)'
cond_expression='struct test_type{void test_type() &&{}};'
declare_feature ref_qualifiers 200710

#------------------------------------------------------------------------------
# c++11 variadic_templates (N2242)

cond_gcc='MWGCONF_GCC_STD11>=40300'
cond_icc='MWGCONF_ICC_STD11>=1206'
cond_msc='_MSC_VER>=1800'
cond_clang='-a'
cond_expression='template<typename... A> void f(A const&...);'
declare_feature variadic_templates 200704

#------------------------------------------------------------------------------
# c++11 defaulted_functions/deleted_functions (N2346)

cond_gcc='MWGCONF_GCC_STD11>=40400'
cond_icc='MWGCONF_ICC_STD11>=1200'
cond_msc='_MSC_VER>=1800'
cond_clang='-a'
cond_expression='struct test_type{test_type() =default;};'
declare_feature defaulted_functions
cond_expression='struct test_type{test_type() =delete;};'
declare_feature deleted_functions

#------------------------------------------------------------------------------
# c++11 explicit_conversions (N2437)

cond_gcc='MWGCONF_GCC_STD11>=40500'
cond_icc='MWGCONF_ICC_STD11>=1300'
cond_msc='_MSC_VER>=1800'
cond_clang='-a'
cond_expression='struct test_type{explicit operator int() const{return 1;}};'
declare_feature explicit_conversions

#------------------------------------------------------------------------------
# c++11 constexpr (N2235)

cond_gcc='MWGCONF_GCC_STD11>=40600'
cond_icc='MWGCONF_ICC_STD11>=1300'
cond_msc='_MSC_VER>=1900'
cond_clang='-a'
cond_expression='struct test_type{constexpr int test_member_function(){return 1;}};'
declare_feature constexpr 200704

# N2235   200704
# N3652   201304
# P0170R1 201603

#------------------------------------------------------------------------------
# c++11 alias_templates (N2258)

cond_gcc='MWGCONF_GCC_STD11>=40700'
cond_icc='MWGCONF_ICC_STD11>=1206'
cond_msc='_MSC_VER>=1800'
cond_clang='-a'
cond_expression='struct test_type{constexpr int test_member_function(){return 1;}};'
declare_feature alias_templates 200704

#------------------------------------------------------------------------------
# c++11 static_assert (N1720)

cond_gcc='MWGCONF_GCC_STD11>=40300'
cond_icc='MWGCONF_ICC_STD11>=1110'
cond_msc='_MSC_VER>=1600'
cond_clang='-a'
cond_expression='static_assert(1,"test");'
declare_feature static_assert 200410

#------------------------------------------------------------------------------
# c++11 unicode_literals (N2442)

cond_gcc='MWGCONF_GCC_STD11>=40500'
cond_icc='0' # 1110 with /Qoptions,cpp,"--uliterals" ?
cond_msc='_MSC_VER>=1900'
cond_clang='-a'
cond_expression='char* x=u8"aiueo";'
declare_feature unicode_literals 200710

#------------------------------------------------------------------------------
# c++11 char16_t/char32_t (N2249)

cond_gcc='MWGCONF_GCC_STD11>=40400'
cond_icc='MWGCONF_ICC_STD11>=1206'
cond_msc='_MSC_VER>=1900'
cond_clang='MWGCONF_CLANG_STD11>=20900'
cond_expression='char16_t* x=0;'
declare_feature char16_t 200704
cond_expression='char32_t* x=0;'
declare_feature char32_t 200704

cat <<EOF >&$fdbase
#if defined(MWGCONF_STD_CHAR16_T)&&defined(MWGCONF_STD_CHAR32_T)
# define MWGCONF_STD_UNICODE_CHARACTERS 200704
#endif

EOF

#------------------------------------------------------------------------------
# c++11 list_initialiations (N2672)

cond_gcc='MWGCONF_GCC_STD11>=40400'
cond_icc='MWGCONF_ICC_STD11>=1400'
cond_msc='_MSC_VER>=1800'
cond_clang='__has_feature(cxx_generalized_initializers)' # clang-3.1
cond_expression='int a { 1 };'
declare_feature initializer_lists 200806

#------------------------------------------------------------------------------
# c++11 noexcept (N3050)

cond_gcc='MWGCONF_GCC_STD11>=40600'
cond_icc='MWGCONF_ICC_STD11>=1400'
cond_msc='_MSC_VER>=1900'
cond_clang='-a' # clang-3.0
cond_expression='struct C { void mem() noexcept {} };'
declare_feature noexcept 201003

#------------------------------------------------------------------------------
# c++11 override_control (N2928, N3206, N3272)

cond_gcc='MWGCONF_GCC_STD11>=40700'
cond_icc='MWGCONF_ICC_STD11>=1400'
cond_msc='_MSC_VER>=1700'
cond_clang='-a' # clang-2.9
cond_expression='struct B {virtual void mem() {}}; struct C1: B {void mem() override {}}; struct C2: B {void mem() final {}};'
declare_feature override_control 201103

#------------------------------------------------------------------------------
# c++14 variable templates (N3651)

cond_gcc='MWGCONF_GCC_STD11>=50000'
cond_icc='MWGCONF_ICC_STD11>=1700'
cond_msc='_MSC_VER>=1900'
cond_clang='-a' # clang-3.4
cond_expression='struct B {template<typename T> static constexpr T pi = 3.14;}; double a = B::pi<double>;'
declare_feature variable_templates 201304

#------------------------------------------------------------------------------
# c++17 inline variables (P0386R2)

cond_gcc='MWGCONF_GCC_STD11>=70000'
cond_icc='0'
cond_msc='0'
cond_clang='-a' # clang-3.4
cond_expression='struct B {inline int var {123};};'
declare_feature inline_variables 201606

#------------------------------------------------------------------------------
# c++2x concept

# undef
D MWGCONF_STD_CONCEPT

#******************************************************************************

cat<<EOF >&$fdbase
#endif /* MWGCONF_MWG_CONFIG_COMMON_H */
EOF

P '#%include mwg_config.2.h'
P '#endif'
