// -*- mode:C++;coding:utf-8 -*-
#ifndef MWG_STDM_UTILITY
#define MWG_STDM_UTILITY
#include <mwg/defs.h>
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
#if MWGCONF_HEADER_STD>=2011
# include <utility>
#else
# include <algorithm>
# include <utility>
# include "type_traits"
namespace mwg{
namespace stdm{

#if defined(MWGCONF_STD_RVALUE_REFERENCES)
  template<typename T>
  T&& forward(typename stdm::remove_reference<T>::type& value){
    return static_cast<T&&>(value);
  }
  template<typename T>
  T&& forward(typename stdm::remove_reference<T>::type&& value){
    return static_cast<T&&>(value);
  }
  template<typename T>
  typename stdm::remove_reference<T>::type&& move(T&& value){
    return static_cast<typename stdm::remove_reference<T>::type&&>(value);
  }
#else
  template<typename T>
  typename stdx::add_const_reference<T>::type
  forward(typename stdx::add_const_reference<T>::type value){return value;}
  template<typename T>
  typename enable_if<!is_const<T>::value,T&>::type
  forward(T& value){return value;}

  template<typename T>
  T& move(const T& value){return const_cast<T&>(value);}
  template<typename T>
  typename enable_if<!is_const<T>::value,T&>::type
  move(T& value){return value;}
#endif
}
}
#endif /* end of MWGCONF_HEADER_STD switch */
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH

//-----------------------------------------------------------------------------
namespace mwg{
namespace stdx{
#if defined(MWGCONF_STD_RVALUE_REFERENCES)
#  define mwg_forward_rvalue &&
#else
#  define mwg_forward_rvalue const&
/*
  // usage:
  template<typename T> void hoge(T mwg_forward_rvalue t){hoge_impl(mwg::stdm::forward<T>(t));}

  template<typename T> void hoge(T const& t){hoge_impl(t);}
  // NG: 参照が定数参照になる
  //  ok: int -> const int&
  //  ng: int& -> const int&
  //  ok: const int& -> const int&

  template<typename T> void hoge(T& t){hoge_impl(t);}
  // NG: 定数値を渡せない
  //  ng: int
  //  ok: int& -> int&
  //  ok: const int& -> const int&
*/
#endif
}
}
//HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
#endif /* end of include guard */
